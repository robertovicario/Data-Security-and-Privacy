-- Task 1: Database Design

-- DDL

-- Users
CREATE TABLE Users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL,
    role VARCHAR2(25) NOT NULL,
    score NUMBER DEFAULT 0 CHECK (score >= 0) NOT NULL,
    status NUMBER(1) DEFAULT 1 CHECK (status IN (0, 1)) NOT NULL,
    -- -------------------------
    CHECK (role IN ('Student', 'Tutor', 'Admin'))
);

-- Challenges
CREATE TABLE Challenges (
    code VARCHAR2(25) PRIMARY KEY,
    title VARCHAR2(100) NOT NULL UNIQUE,
    body CLOB NOT NULL,
    category VARCHAR2(50) NOT NULL,
    flag VARCHAR2(255) NOT NULL UNIQUE,
    is_visible NUMBER(1) DEFAULT 1 CHECK (is_visible IN (0, 1)) NOT NULL,
    is_available NUMBER(1) DEFAULT 1 CHECK (is_available IN (0, 1)) NOT NULL,
    points NUMBER DEFAULT 0 CHECK (points >= 0) NOT NULL
);

-- Solved Challenges
CREATE TABLE Solved_Challenges (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    solved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    user_id NUMBER NOT NULL,
    challenge_code VARCHAR2(25) NOT NULL,
    -- -------------------------
    CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
    CONSTRAINT fk_challenge_code FOREIGN KEY (challenge_code) REFERENCES Challenges(code) ON DELETE CASCADE,
    CONSTRAINT uq_user_challenge UNIQUE (user_id, challenge_code)
);

-- Leaderboard
CREATE VIEW Leaderboard AS
SELECT u.id, u.username, u.score, COUNT(sc.challenge_code) AS Solved_Challenges
FROM Users u
LEFT JOIN Solved_Challenges sc ON u.id = sc.user_id
WHERE u.status = 1 AND u.role = 'Student'
GROUP BY u.id, u.username, u.score
ORDER BY u.score DESC, COUNT(sc.challenge_code) DESC;
